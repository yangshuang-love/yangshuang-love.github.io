<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Y.S</title>
  
  <subtitle>有些路很远，走下去会很累。可是，不走，会后悔。</subtitle>
  <link href="http://hukayun.com/atom.xml" rel="self"/>
  
  <link href="http://hukayun.com/"/>
  <updated>2020-10-26T06:35:45.335Z</updated>
  <id>http://hukayun.com/</id>
  
  <author>
    <name>Y S</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>apollo 使用 VUE 示例</title>
    <link href="http://hukayun.com/2020/01/13/apollo/"/>
    <id>http://hukayun.com/2020/01/13/apollo/</id>
    <published>2020-01-13T00:00:00.000Z</published>
    <updated>2020-10-26T06:35:45.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apollo 是 GraphQL 的一种实现，解决 RESTful API 的一些问题。</p><p>官网教程：<a href="https://www.apollographql.com/docs/tutorial/introduction/">https://www.apollographql.com/docs/tutorial/introduction/</a></p><p>前端库：<br><code>npm install --save vue-apollo apollo-client</code></p><p>我们按照官网示例做一遍教程，构建一个预订 SpaceX 发射的小应用。主要包括：</p><ul><li>登录页</li><li>即将发射清单</li><li>发射细节</li><li>用户资料页</li><li>购物车</li></ul><p>其他参考链接<br><a href="https://dev.to/alvarojsnish/graphql-mongodb-the-easy-way-ngc">https://dev.to/alvarojsnish/graphql-mongodb-the-easy-way-ngc</a></p><p><a href="https://stackoverflow.com/questions/52382639/connect-apollo-server-with-mongodb-mongoos/52462031">https://stackoverflow.com/questions/52382639/connect-apollo-server-with-mongodb-mongoos/52462031</a></p><h2 id="服务器端起步"><a href="#服务器端起步" class="headerlink" title="服务器端起步"></a>服务器端起步</h2><p>下载教程代码：</p><p><code>git clone https://github.com/apollographql/fullstack-tutorial.git</code></p><p>起步使用 start 目录，完成教程的代码参考 final 目录。</p><p>先编辑 server 目录，也就是服务器。</p><p>新建模式之前，先设置 API 服务器。Apollo 服务器是一个连接数据的库。先安装依赖：</p><p><code>cd start/server &amp;&amp; npm install</code></p><p>其中核心的依赖是：<code>apollo-server</code> 和 <code>graphql</code> 这两个包。</p><p>先修改入口 <code>src/index.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ApolloServer &#125; = <span class="built_in">require</span>(<span class="string">&quot;apollo-server&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> typeDefs = <span class="built_in">require</span>(<span class="string">&quot;./schema&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> ApolloServer(&#123; typeDefs &#125;);</span><br></pre></td></tr></table></figure><p>这里导入了 ApolloServer 类，并用编写的模式新建服务器实例。下面我们编写模式。</p><h3 id="新建模式"><a href="#新建模式" class="headerlink" title="新建模式"></a>新建模式</h3><p>可以把模式（schema）当做所有数据及关系的蓝图。模式还定义了我们可以通过查询获取哪些数据以及更新哪些数据。模式是强类型的。</p><p>官方文档认为是模式是前端和后端团队进行协作的理想结合点，建议团队练习 Schema First Development。</p><p>参照我们的目标，应用需要：</p><ul><li>获取所有即将到来的火箭发射</li><li>通过其 ID 获取特定的发射</li><li>登录用户</li><li>预订发射（登录状态下）</li><li>取消发射（登录状态下）</li></ul><p>基于这些要求去构建模式。修改 <code>src/schema.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; gql &#125; = <span class="built_in">require</span>(<span class="string">&quot;apollo-server&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> typeDefs = gql<span class="string">`</span></span><br><span class="line"><span class="string">  # Your schema will go here</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = typeDefs;</span><br></pre></td></tr></table></figure><p>导入 gql。并用示例的方式写入模式代码。</p><p>语言使用的是 SDL 语言（GraphQL’s schema definition language）。看着有一点像 <code>TypeScript</code>。</p><p>从查询类型 (Query type) 开始，查询类型主要是用来描述我们的数据，是模式的入口点。现在我们加入一些代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; gql &#125; = <span class="built_in">require</span>(<span class="string">&quot;apollo-server&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> typeDefs = gql(<span class="string">`</span></span><br><span class="line"><span class="string">  type Query &#123;</span></span><br><span class="line"><span class="string">    launches: [Launch]!</span></span><br><span class="line"><span class="string">    launch(id: ID!): Launch</span></span><br><span class="line"><span class="string">    # Queries for the current user</span></span><br><span class="line"><span class="string">    me: User</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = typeDefs;</span><br></pre></td></tr></table></figure><p>定义了非空数组 launches，定义了通过 id 查询单个 launch，还定义了 me 获取用户信息。这里我们使用 Launch 和 User 两个对象类型。我们下面来定义一下他们。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">type Launch &#123;</span><br><span class="line">  id: ID!</span><br><span class="line">  site: <span class="built_in">String</span></span><br><span class="line">  mission: Mission</span><br><span class="line">  rocket: Rocket</span><br><span class="line">  isBooked: <span class="built_in">Boolean</span>!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Rocket &#123;</span><br><span class="line">  id: ID!</span><br><span class="line">  name: <span class="built_in">String</span></span><br><span class="line">  type: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type User &#123;</span><br><span class="line">  id: ID!</span><br><span class="line">  email: <span class="built_in">String</span>!</span><br><span class="line">  trips: [Launch]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Mission &#123;</span><br><span class="line">  name: <span class="built_in">String</span></span><br><span class="line">  missionPatch(size: PatchSize): <span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum PatchSize &#123;</span><br><span class="line">  SMALL</span><br><span class="line">  LARGE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确实很像 TS，有很多基础类型如 ID, String, Boolean, Int 等，也可以使用自定义类型。</p><p>missionPatch 这里也加入了参数，因为 GraphQL 非常灵活，可以在任何字段里包含参数。还可以定义枚举类型。</p><p><a href="https://devhints.io/graphql#schema">详细用法参考</a></p><p>然后是 Mutation type 变动类型。主要是修改数据的入口点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type Mutation &#123;</span><br><span class="line">  # if false, booking trips failed -- check errors</span><br><span class="line">  bookTrips(launchIds: [ID]!): TripUpdateResponse!</span><br><span class="line"></span><br><span class="line">  # if false, cancellation failed -- check errors</span><br><span class="line">  cancelTrip(launchId: ID!): TripUpdateResponse!</span><br><span class="line"></span><br><span class="line">  login(email: String): String # login token</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type TripUpdateResponse &#123;</span><br><span class="line">  success: <span class="built_in">Boolean</span>!</span><br><span class="line">  message: <span class="built_in">String</span></span><br><span class="line">  launches: [Launch]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bookTrips 和 cancelTrip 这两个变动都会接受一个参数，并返回一个更新响应 TripUpdateResponse。在响应里不光包含了状态和信息，还包括了更新后的数据。这是一种好习惯，可以让客户端自动缓存更新。</p><p>现在设置服务器监听，修改 index.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ApolloServer &#125; = <span class="built_in">require</span>(<span class="string">&quot;apollo-server&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> typeDefs = <span class="built_in">require</span>(<span class="string">&quot;./schema&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> ApolloServer(&#123; typeDefs &#125;);</span><br><span class="line"></span><br><span class="line">server.listen().then(<span class="function">(<span class="params">&#123; url &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`🚀 Server ready at <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`GraphQL Playground run at <span class="subst">$&#123;url&#125;</span>graphql`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行 npm start，服务器默认端口 4000。</p><p>默认 Apollo 开发环境会开启 <a href="https://www.apollographql.com/docs/apollo-server/testing/graphql-playground/">GraphQL Playground</a>。这是一个交互式浏览器 IDE，可以用来浏览和测试。生产环境自动关闭。</p><p>点击右侧的 schema 按钮和 docs 按钮，可以直接浏览自动生成文档和模式代码。</p><h3 id="连接数据"><a href="#连接数据" class="headerlink" title="连接数据"></a>连接数据</h3><p>现在我们可以通过建立的模式来连接数据源了。我们的数据源可以是任意服务，比如业务逻辑，REST APIs, 数据库, 或者 gRPC 服务。</p><p>下面我们会试试连接 REST API 和 SQL 数据库。新建<code>src/datasources/launch.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; RESTDataSource &#125; = <span class="built_in">require</span>(<span class="string">&quot;apollo-datasource-rest&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LaunchAPI</span> <span class="keyword">extends</span> <span class="title">RESTDataSource</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.baseURL = <span class="string">&quot;https://api.spacexdata.com/v2/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = LaunchAPI;</span><br></pre></td></tr></table></figure><p>设定了 api 基本地址。RESTDataSource 还设置了内存缓存，无需额外设置即可缓存来自 REST 资源的响应。我们称此为部分查询缓存。此缓存的优点在于，您可以重用 REST API 公开的现有缓存逻辑。</p><p>然后写数据拉取方法，首先添加一个获取所有发射：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getAllLaunches</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="built_in">this</span>.get(<span class="string">&#x27;launches&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(response)</span><br><span class="line">    ? response.map(<span class="function"><span class="params">launch</span> =&gt;</span> <span class="built_in">this</span>.launchReducer(launch))</span><br><span class="line">    : [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get 这句代码就是发送了 get 请求到<a href="https://api.spacexdata.com/v2/launches%E3%80%82%E8%8E%B7%E5%8F%96%E7%9A%84%E6%95%B0%E6%8D%AE%E6%95%B0%E7%BB%84%E5%8F%88%E7%BB%8F%E8%BF%87%E4%BA%86%E4%B8%80%E4%B8%AAmap%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E5%AF%B9%E6%AF%8F%E4%B8%AA%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E4%BA%86%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%88%91%E4%BB%AC%E6%8E%A5%E7%9D%80%E5%86%99%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%9A">https://api.spacexdata.com/v2/launches。获取的数据数组又经过了一个map遍历方法，也就是对每个数据进行了操作，我们接着写这个方法的实现：</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">launchReducer</span>(<span class="params">launch</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    id: launch.flight_number || <span class="number">0</span>,</span><br><span class="line">    cursor: <span class="string">`<span class="subst">$&#123;launch.launch_date_unix&#125;</span>`</span>,</span><br><span class="line">    site: launch.launch_site &amp;&amp; launch.launch_site.site_name,</span><br><span class="line">    mission: &#123;</span><br><span class="line">      name: launch.mission_name,</span><br><span class="line">      missionPatchSmall: launch.links.mission_patch_small,</span><br><span class="line">      missionPatchLarge: launch.links.mission_patch,</span><br><span class="line">    &#125;,</span><br><span class="line">    rocket: &#123;</span><br><span class="line">      id: launch.rocket.rocket_id,</span><br><span class="line">      name: launch.rocket.rocket_name,</span><br><span class="line">      type: launch.rocket.rocket_type,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法类似一个重映射，将 api 里的字段映射到了我们定义的 schema 中的字段，同时还做了数据的精简和组织。</p><p>然后再增加两个通过 id 或 id 列表来获取特定发射数据的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getLaunchById</span>(<span class="params">&#123; launchId &#125;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="built_in">this</span>.get(<span class="string">&#x27;launches&#x27;</span>, &#123; <span class="attr">flight_number</span>: launchId &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.launchReducer(response[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getLaunchesByIds</span>(<span class="params">&#123; launchIds &#125;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">    launchIds.map(<span class="function"><span class="params">launchId</span> =&gt;</span> <span class="built_in">this</span>.getLaunchById(&#123; launchId &#125;)),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 id 获取数据，如果是数组，则分别调用单个 id 获取的方法。现在 rest 方式已经成功啦。</p><p>user.js 在示例中已经提供了，可以先读一下。数据结构已经准备好了。</p><p>然后开始添加到 server，修改 index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ApolloServer &#125; = <span class="built_in">require</span>(<span class="string">&quot;apollo-server&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> typeDefs = <span class="built_in">require</span>(<span class="string">&quot;./schema&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; createStore &#125; = <span class="built_in">require</span>(<span class="string">&quot;./utils&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LaunchAPI = <span class="built_in">require</span>(<span class="string">&quot;./datasources/launch&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> UserAPI = <span class="built_in">require</span>(<span class="string">&quot;./datasources/user&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> ApolloServer(&#123;</span><br><span class="line">  typeDefs,</span><br><span class="line">  dataSources: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    launchAPI: <span class="keyword">new</span> LaunchAPI(),</span><br><span class="line">    userAPI: <span class="keyword">new</span> UserAPI(&#123; store &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen().then(<span class="function">(<span class="params">&#123; url &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`🚀 Server ready at <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Apollo 是 GraphQL 的一种实现，解决 RESTful API 的一些问题。&lt;/p&gt;
&lt;p&gt;官网教程：&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="技术" scheme="http://hukayun.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Node.js" scheme="http://hukayun.com/tags/Node-js/"/>
    
    <category term="Vue.js" scheme="http://hukayun.com/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>base64与arrayBuffer互相转换</title>
    <link href="http://hukayun.com/2019/07/18/base64%E4%B8%8EarrayBuffer%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
    <id>http://hukayun.com/2019/07/18/base64%E4%B8%8EarrayBuffer%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</id>
    <published>2019-07-18T00:00:00.000Z</published>
    <updated>2020-10-26T06:35:45.335Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function arrayBufferToBase64(buffer)&#123;</span><br><span class="line">    var binary &#x3D; &quot;&quot;;</span><br><span class="line">    var bytes &#x3D; new Unit8Array(buffer);</span><br><span class="line">    var len &#x3D; bytes.byteLength;</span><br><span class="line">    for(var i &#x3D; 0;i&lt;len;i++)&#123;</span><br><span class="line">        binary +&#x3D; String.fromCharCode(bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">return window.btoa(binary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function _base64ToArrayBuffer(base64) &#123;</span><br><span class="line">    var binary_string &#x3D;  window.atob(base64.split(&quot;,&quot;)[1]);</span><br><span class="line">    var len &#x3D; binary_string.length;</span><br><span class="line">    var bytes &#x3D; new Uint8Array( len );</span><br><span class="line">    for (var i &#x3D; 0; i &lt; len; i++)        &#123;</span><br><span class="line">    bytes[i] &#x3D; binary_string.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    return bytes.buffer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="代码" scheme="http://hukayun.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="JavaScript" scheme="http://hukayun.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative环境搭建</title>
    <link href="http://hukayun.com/2019/04/15/ReactNative%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://hukayun.com/2019/04/15/ReactNative%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2019-04-15T00:00:00.000Z</published>
    <updated>2020-10-26T06:35:45.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-环境"><a href="#一、-环境" class="headerlink" title="一、 环境"></a>一、 环境</h2><ol><li><p>node环境</p></li><li><p>android sdk</p></li><li><p>react-native-cli</p></li><li><p>Genymotion模拟器（暂时使用的是30天个人试用版，依赖VirtualBox）</p></li></ol><h2 id="二、启动"><a href="#二、启动" class="headerlink" title="二、启动"></a>二、启动</h2><ol><li>启动React Native Server： </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native start</span><br></pre></td></tr></table></figure><ol start="2"><li><p>打开VirtualBox，打开Genymotion模拟器</p></li><li><p>另开一个cmd:</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd android</span><br><span class="line"></span><br><span class="line">gradlew.bat installDebug</span><br></pre></td></tr></table></figure><ol start="3"><li><p>android\app\build\outputs\apk里面的apk文件拖到Genymotion中安装执行：</p></li><li><p>浏览器打开下面链接：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8081&#x2F;index.android.bundle?platform&#x3D;android</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、-环境&quot;&gt;&lt;a href=&quot;#一、-环境&quot; class=&quot;headerlink&quot; title=&quot;一、 环境&quot;&gt;&lt;/a&gt;一、 环境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;node环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;android sdk&lt;/p&gt;
&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="开发环境" scheme="http://hukayun.com/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="windows" scheme="http://hukayun.com/tags/windows/"/>
    
    <category term="react" scheme="http://hukayun.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>解放F5--前端页面实时刷新</title>
    <link href="http://hukayun.com/2019/01/12/%E8%A7%A3%E6%94%BEF5--%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0/"/>
    <id>http://hukayun.com/2019/01/12/%E8%A7%A3%E6%94%BEF5--%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0/</id>
    <published>2019-01-12T00:00:00.000Z</published>
    <updated>2020-10-26T06:35:45.335Z</updated>
    
    <content type="html"><![CDATA[<p>##　解放F5–前端页面实时刷新</p><hr><p>最近在研究前端自动化工具时一直在寻找一种方法或者工具能够满足同时监听多个页面代码修改并刷新的方法,之前手里有个gulp项目可以在本地起服务并对代码进行监听，但是只适用于单页面，然后近段时间翻看了几个用gulp+webpack构建的多页面项目源码，发现跟个人的需求总有不一致的地方，另外在周五也就是03.10偶然发现<a href="https://segmentfault.com/q/1010000008657801">gulp代理会导致服务端接收不到数据</a>，目前正在研究解决办法。</p><h2 id="正题："><a href="#正题：" class="headerlink" title="正题："></a>正题：</h2><p>实时刷新方法我目前用过的有三种，前两种就是gulp和webpack，都能启动服务并进行监听，网上资料很多，就不细说了，第三种是本文的重点也是对之前提到的需求的降级解决办法<a href="http://www.browsersync.cn/">Browsersync</a>，暂时实现了静态页面直接启动服务监听文件修改，另外在我本地有个nginx服务，使用<a href="http://www.browsersync.cn/">Browsersync</a>能够实现nginx服务端口代理监听</p><p>具体关于Browsersync可以查看<a href="http://www.browsersync.cn/">Browsersync中文官网</a>;</p><ol><li><p>先安装nodeJS并添加到环境变量</p></li><li><p>全局安装browser-sync</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g browser-sync</span><br></pre></td></tr></table></figure></li></ol><p>静态页面方法：</p><ol><li>cd 项目目录</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser-sync start --server --files &quot;**&#x2F;*.css,**&#x2F;*.html,**&#x2F;*.js&quot;</span><br></pre></td></tr></table></figure></li></ol><p>动态页面(php、nginx等)方法：</p><ol><li>cd 项目目录</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser-sync start --proxy &quot;本机ip&#x2F;nginx配置路由&#x2F;&quot; --files &quot;**&#x2F;*.css,**&#x2F;*.html,**&#x2F;*.js&quot;</span><br></pre></td></tr></table></figure></li></ol><p>备忘注意事项：<br>    当前方法并非最终解决方案，目前仅是使用了页面实时监听，多页面自动化仍需要寻找解决方案，另外关于动态页面使用browser-sync时proxy一定要代理本机ip而不是localhost，这是一个坑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##　解放F5–前端页面实时刷新&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最近在研究前端自动化工具时一直在寻找一种方法或者工具能够满足同时监听多个页面代码修改并刷新的方法,之前手里有个gulp项目可以在本地起服务并对代码进行监听，但是只适用于单页面，然后近段时间翻看了几个用gulp+web</summary>
      
    
    
    
    <category term="开发环境" scheme="http://hukayun.com/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="windows" scheme="http://hukayun.com/tags/windows/"/>
    
    <category term="调试" scheme="http://hukayun.com/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JS浮点数丢失精度解决办法以及tofixd四舍五入</title>
    <link href="http://hukayun.com/2018/12/16/JS%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E4%BB%A5%E5%8F%8Atofixd%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/"/>
    <id>http://hukayun.com/2018/12/16/JS%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B8%A2%E5%A4%B1%E7%B2%BE%E5%BA%A6%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E4%BB%A5%E5%8F%8Atofixd%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/</id>
    <published>2018-12-16T00:00:00.000Z</published>
    <updated>2020-10-26T06:35:45.335Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * floatTool 包含加减乘除四个方法，能确保浮点数运算不丢失精度</span><br><span class="line"> *</span><br><span class="line"> * 我们知道计算机编程语言里浮点数计算会存在精度丢失问题（或称舍入误差），其根本原因是二进制和实现位数限制有些数无法有限表示</span><br><span class="line"> * 以下是十进制小数对应的二进制表示</span><br><span class="line"> *      0.1 &gt;&gt; 0.0001 1001 1001 1001…（1001无限循环）</span><br><span class="line"> *      0.2 &gt;&gt; 0.0011 0011 0011 0011…（0011无限循环）</span><br><span class="line"> * 计算机里每种数据类型的存储是一个有限宽度，比如 JavaScript 使用 64 位存储数字类型，因此超出的会舍去。舍去的部分就是精度丢失的部分。</span><br><span class="line"> *</span><br><span class="line"> * ** method **</span><br><span class="line"> *  add &#x2F; subtract &#x2F; multiply &#x2F;divide</span><br><span class="line"> *</span><br><span class="line"> * ** explame **</span><br><span class="line"> *  0.1 + 0.2 &#x3D;&#x3D; 0.30000000000000004 （多了 0.00000000000004）</span><br><span class="line"> *  0.2 + 0.4 &#x3D;&#x3D; 0.6000000000000001  （多了 0.0000000000001）</span><br><span class="line"> *  19.9 * 100 &#x3D;&#x3D; 1989.9999999999998 （少了 0.0000000000002）</span><br><span class="line"> *</span><br><span class="line"> * floatObj.add(0.1, 0.2) &gt;&gt; 0.3</span><br><span class="line"> * floatObj.multiply(19.9, 100) &gt;&gt; 1990</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">var floatTool &#x3D; function() &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;*</span><br><span class="line">     * 判断obj是否为一个整数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    function isInteger(obj) &#123;</span><br><span class="line">        return Math.floor(obj) &#x3D;&#x3D;&#x3D; obj</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;*</span><br><span class="line">     * 将一个浮点数转成整数，返回整数和倍数。如 3.14 &gt;&gt; 314，倍数是 100</span><br><span class="line">     * @param floatNum &#123;number&#125; 小数</span><br><span class="line">     * @return &#123;object&#125;</span><br><span class="line">     *   &#123;times:100, num: 314&#125;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    function toInteger(floatNum) &#123;</span><br><span class="line">        var ret &#x3D; &#123;times: 1, num: 0&#125;</span><br><span class="line">        if (isInteger(floatNum)) &#123;</span><br><span class="line">            ret.num &#x3D; floatNum</span><br><span class="line">            return ret</span><br><span class="line">        &#125;</span><br><span class="line">        var strfi  &#x3D; floatNum + &#39;&#39;</span><br><span class="line">        var dotPos &#x3D; strfi.indexOf(&#39;.&#39;)</span><br><span class="line">        var len    &#x3D; strfi.substr(dotPos+1).length</span><br><span class="line">        var times  &#x3D; Math.pow(10, len)</span><br><span class="line">        var intNum &#x3D; parseInt(floatNum * times + 0.5, 10)</span><br><span class="line">        ret.times  &#x3D; times</span><br><span class="line">        ret.num    &#x3D; intNum</span><br><span class="line">        return ret</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;*</span><br><span class="line">     * 核心方法，实现加减乘除运算，确保不丢失精度</span><br><span class="line">     * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）</span><br><span class="line">     *</span><br><span class="line">     * @param a &#123;number&#125; 运算数1</span><br><span class="line">     * @param b &#123;number&#125; 运算数2</span><br><span class="line">     * @param digits &#123;number&#125; 精度，保留的小数点数，比如 2, 即保留为两位小数</span><br><span class="line">     * @param op &#123;string&#125; 运算类型，有加减乘除（add&#x2F;subtract&#x2F;multiply&#x2F;divide）</span><br><span class="line">     *</span><br><span class="line">     *&#x2F;</span><br><span class="line">    function operation(a, b, op) &#123;</span><br><span class="line">        var o1 &#x3D; toInteger(a)</span><br><span class="line">        var o2 &#x3D; toInteger(b)</span><br><span class="line">        var n1 &#x3D; o1.num</span><br><span class="line">        var n2 &#x3D; o2.num</span><br><span class="line">        var t1 &#x3D; o1.times</span><br><span class="line">        var t2 &#x3D; o2.times</span><br><span class="line">        var max &#x3D; t1 &gt; t2 ? t1 : t2</span><br><span class="line">        var result &#x3D; null</span><br><span class="line">        switch (op) &#123;</span><br><span class="line">            case &#39;add&#39;:</span><br><span class="line">                if (t1 &#x3D;&#x3D;&#x3D; t2) &#123; &#x2F;&#x2F; 两个小数位数相同</span><br><span class="line">                    result &#x3D; n1 + n2</span><br><span class="line">                &#125; else if (t1 &gt; t2) &#123; &#x2F;&#x2F; o1 小数位 大于 o2</span><br><span class="line">                    result &#x3D; n1 + n2 * (t1 &#x2F; t2)</span><br><span class="line">                &#125; else &#123; &#x2F;&#x2F; o1 小数位 小于 o2</span><br><span class="line">                    result &#x3D; n1 * (t2 &#x2F; t1) + n2</span><br><span class="line">                &#125;</span><br><span class="line">                return result &#x2F; max</span><br><span class="line">            case &#39;subtract&#39;:</span><br><span class="line">                if (t1 &#x3D;&#x3D;&#x3D; t2) &#123;</span><br><span class="line">                    result &#x3D; n1 - n2</span><br><span class="line">                &#125; else if (t1 &gt; t2) &#123;</span><br><span class="line">                    result &#x3D; n1 - n2 * (t1 &#x2F; t2)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    result &#x3D; n1 * (t2 &#x2F; t1) - n2</span><br><span class="line">                &#125;</span><br><span class="line">                return result &#x2F; max</span><br><span class="line">            case &#39;multiply&#39;:</span><br><span class="line">                result &#x3D; (n1 * n2) &#x2F; (t1 * t2)</span><br><span class="line">                return result</span><br><span class="line">            case &#39;divide&#39;:</span><br><span class="line">                return result &#x3D; function() &#123;</span><br><span class="line">                    var r1 &#x3D; n1 &#x2F; n2</span><br><span class="line">                    var r2 &#x3D; t2 &#x2F; t1</span><br><span class="line">                    return operation(r1, r2, &#39;multiply&#39;)</span><br><span class="line">                &#125;()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 加减乘除的四个接口</span><br><span class="line">    function add(a, b) &#123;</span><br><span class="line">        return operation(a, b, &#39;add&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    function subtract(a, b) &#123;</span><br><span class="line">        return operation(a, b, &#39;subtract&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    function multiply(a, b) &#123;</span><br><span class="line">        return operation(a, b, &#39;multiply&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    function divide(a, b) &#123;</span><br><span class="line">        return operation(a, b, &#39;divide&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; exports</span><br><span class="line">    return &#123;</span><br><span class="line">        add: add,</span><br><span class="line">        subtract: subtract,</span><br><span class="line">        multiply: multiply,</span><br><span class="line">        divide: divide</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; toFixed 修复</span><br><span class="line">function toFixed(num, len) &#123;</span><br><span class="line">    var times &#x3D; Math.pow(10, len);</span><br><span class="line">    var des &#x3D; num * times + 0.5;</span><br><span class="line">    des &#x3D; parseInt(des, 10) &#x2F; times;</span><br><span class="line">    return des + &#39;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="代码" scheme="http://hukayun.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="JavaScript" scheme="http://hukayun.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>设置chrome浏览器允许跨域</title>
    <link href="http://hukayun.com/2018/09/03/%E8%AE%BE%E7%BD%AEchrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F/"/>
    <id>http://hukayun.com/2018/09/03/%E8%AE%BE%E7%BD%AEchrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F/</id>
    <published>2018-09-03T00:00:00.000Z</published>
    <updated>2020-10-26T06:35:45.335Z</updated>
    
    <content type="html"><![CDATA[<p>2020-10-22 更新！！</p><ol><li><p>在C盘新建文件夹MyChromeDevUserData</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\MyChromeDevUserData</span><br></pre></td></tr></table></figure></li><li><p>复制chrome快捷方式，并右键-&gt;属性-&gt;快捷方式-&gt;目标 添加–disable-web-security –user-data-dir=C:\MyChromeDevUserData</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --disable-web-security --user-data-dir&#x3D;C:\MyChromeDevUserData</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020-10-22 更新！！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在C盘新建文件夹MyChromeDevUserData&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    <category term="开发环境" scheme="http://hukayun.com/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="windows" scheme="http://hukayun.com/tags/windows/"/>
    
    <category term="chrome" scheme="http://hukayun.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hukayun.com/2018/06/07/hello-world/"/>
    <id>http://hukayun.com/2018/06/07/hello-world/</id>
    <published>2018-06-07T00:00:00.000Z</published>
    <updated>2020-10-26T06:35:45.335Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
